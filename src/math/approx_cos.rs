// ---------------------------------------------------------------------------
// Copyright:   (c) 2024 ff. Michael Amrhein (michael@adrhinum.de)
// License:     This program is part of a larger application. For license
//              details please read the file LICENSE.TXT provided together
//              with the application.
// ---------------------------------------------------------------------------
// $Source$
// $Revision$

use crate::{consts::FRAC_PI_2, f256};

const N: usize = 37;

const COEFFS: [f256; N] = [
    // +1 / 72! ≈
    // 1.63306743703879283251712677225717408182913505576385785135386941077341181e-104
    f256::from_bits((
        0x3fea62ba2917dfaa6bd374ca88337e78,
        0x29069cce376391eceee8341c3bb74835,
    )),
    // -1 / 70! ≈
    // -8.3482407381423089598275520597786739063105384050648413361209804278736812e-101
    f256::from_bits((
        0xbfeb275f56494ba531926842c4fc4456,
        0xf733c0b35e20c49f342acd093c873e9e,
    )),
    // +1 / 68! ≈
    // 4.03220027652273522759670764487309949674799004964631836534643354666298802e-97
    f256::from_bits((
        0x3febeb8f8bdfae136bd484b1bc08f916,
        0x0cc026db829ee3db3ba3f887443ffaf7,
    )),
    // -1 / 66! ≈
    // -1.83707044598375816969306000300418413071838426661886264725183512385965734e-93
    f256::from_bits((
        0xbfecaea7ead50ce01a30a298b1e6fb0f,
        0x46aebb38a98a3bf21a96a2b0752a2a66,
    )),
    // +1 / 64! ≈
    // 7.88103221327032254798322741288794992078186850379492075671037268135793e-90
    f256::from_bits((
        0x3fed700dcf6a320e1bb7182616aa05d9,
        0xaff3e0eb5c48f404790c8292885b64d4,
    )),
    // -1 / 62! ≈
    // -3.17763218839059405134683729287642140805924938073011204910562226512351736e-86
    f256::from_bits((
        0xbfee2f9b3059128bc690778afc9ebb84,
        0x926822cf5dafa068ce50a1107c73ee81,
    )),
    // +1 / 60! ≈
    // 1.201780493649322670219373864165862576528008115792128376971746340669714265e-82
    f256::from_bits((
        0x3feeed2eeac43e7fcf77a460f5011064,
        0x88aee724382109bcc57fb2b798e98b58,
    )),
    // -1 / 58! ≈
    // -4.2543029475186022525765834791471535209091487299041344544799820459707885e-79
    f256::from_bits((
        0xbfefa938cc661b03f60e26d0cbbf2b6a,
        0xe32129440d828daa65b09d352ce7d7ae,
    )),
    // +1 / 56! ≈
    // 1.40647255444964990470181849820604895401256457010630685065108206439794268e-75
    f256::from_bits((
        0x3ff0645b77f9e98e12792c1446732c6b,
        0x2592a3ee8d677f97a853ace30b5ea075,
    )),
    // -1 / 54! ≈
    // -4.33193546770492170648160097447463077835869887592742510000533275834566346e-72
    f256::from_bits((
        0xbff11e9d8f6ed83ea9c83b4a7df335cd,
        0x23818889c2a8a6e31425d70174194f50,
    )),
    // +1 / 52! ≈
    // 1.23979993085714859239503419889463932876625961829042906362152623543852888e-68
    f256::from_bits((
        0x3ff1d56457989358c8e1c86dacc15037,
        0xb62f224741e3979beab3f09b23ff2f4b,
    )),
    // -1 / 50! ≈
    // -3.28794941663315806703163069546858349988812050770621787672428757638297858e-65
    f256::from_bits((
        0xbff28bb36f6e12cd78205f0a05345360,
        0x246a08e345d236d2666c0210e51cf1bd,
    )),
    // +1 / 48! ≈
    // 8.0554760707512372642274952038980295747258952438802337979745045621382975e-62
    f256::from_bits((
        0x3ff34091b406b6ff267a5cd8de5cec5e,
        0xe1c7ec90f1235d0a99835abc5b0af018,
    )),
    // -1 / 46! ≈
    // -1.81731540156147912680972291799939547205816196701938074482304822921839991e-58
    f256::from_bits((
        0xbff3f240804f65951062ca46e4f25c60,
        0x84b63a97a9a0f47dad1ab1f37c4a0c7a,
    )),
    // +1 / 44! ≈
    // 3.7618428812322617924961264402587486271603952717301181417837098344820878e-55
    f256::from_bits((
        0x3ff4a272b1b03fec6a4fd9f327e7f6de,
        0x8e232fb8cab36f1e06b6bb5cd9dfd81c,
    )),
    // -1 / 42! ≈
    // -7.11740673129143931140267122496955240258746785411338352425477900684011015e-52
    f256::from_bits((
        0xbff5510af527530de836c4d9225dcb90,
        0x9a4f81963742c4273d33d01747474b26,
    )),
    // +1 / 40! ≈
    // 1.225617439128385849423539984939756923725561964478324642876672944977866965e-48
    f256::from_bits((
        0x3ff5fca8ed42a12ae3001a07244abad2,
        0xab7eb36b1bedc6dbfc6ba16f255d63df,
    )),
    // -1 / 38! ≈
    // -1.91196320504028192510072237650602080101187666458618644288760979416547247e-45
    f256::from_bits((
        0xbff6a5d4acb9c0c3aae913d370a4ec4e,
        0x78a182aa96461e799145fbf7a9762313,
    )),
    // +1 / 36! ≈
    // 2.6882202662866363866916156613674652462226985904081781386999793705966543e-42
    f256::from_bits((
        0x3ff74df983290c2ca92b06b8d12a7275,
        0xbea1c2e9395546d7eaf797768d2db529,
    )),
    // -1 / 34! ≈
    // -3.38715753552116184723143573332300621024060022391430445476197400695178442e-39
    f256::from_bits((
        0xbff7f2710231c0fd7a13f8a2b4af9d6b,
        0x70c8856a7cc5f715d70f53af6fdb9ef5,
    )),
    // +1 / 32! ≈
    // 3.8003907548547435925936708927884129678899534512318495982429348357999021e-36
    f256::from_bits((
        0x3ff89434d2e783f5bc42e1ee46fa6bfc,
        0x3913b62f2db6e93b6e244b31ba1023ab,
    )),
    // -1 / 30! ≈
    // -3.7699876288159056438529215256461056641468338236219948014569913571135029e-33
    f256::from_bits((
        0xbff933932c5047d60e60caded4c2989c,
        0x574b187db44931f192b328d82c3fa28e,
    )),
    // +1 / 28! ≈
    // 3.27988923706983791015204172731211192780774542655113547726758248068874753e-30
    f256::from_bits((
        0x3ff9d0a18a2635085d373c5c51c354a8,
        0xd42a4d4eccac2feebe233733a998109c,
    )),
    // -1 / 26! ≈
    // -2.47959626322479746007494354584795661742265554247265842081429235540069314e-27
    f256::from_bits((
        0xbffa688e85fc6a4e59a38f2050ba6b01,
        0x494676265a363ec684bfff82486a8887,
    )),
    // +1 / 24! ≈
    // 1.61173757109611834904871330480117180132472610260722797352929003101045054e-24
    f256::from_bits((
        0x3ffaff2cf01972f577cca4b4067ca9d8,
        0xa20673feb086ddb20687bf6065ef3f53,
    )),
    // -1 / 22! ≈
    // -8.896791392450573286748897442502468343312488086391898413881680971177687e-22
    f256::from_bits((
        0xbffb90ce396db7f8529450c90b7f338e,
        0xc7577a874b28b381f7852d29f6f2f823,
    )),
    // +1 / 20! ≈
    // 4.1103176233121648584779906184361403746103694959130570672133366086840914e-19
    f256::from_bits((
        0x3ffc1e542ba402022507a9cad2bf8f0b,
        0xabbfdf2029a373f48cb25781bbaa7bcf,
    )),
    // -1 / 18! ≈
    // -1.56192069685862264622163643500573334235194040844696168554106791129995473e-16
    f256::from_bits((
        0xbffca6827863b97d977bb004886a2c2a,
        0xa9786799dee7500f806c5cf2494887e4,
    )),
    // +1 / 16! ≈
    // 4.7794773323873852974382074911175440275969376498477027577556678085778615e-14
    f256::from_bits((
        0x3ffd2ae7f3e733b81f11d8656b0ee8ca,
        0xfe91ebd5ec707db2878187199b98b26f,
    )),
    // -1 / 14! ≈
    // -1.14707455977297247138516979786821056662326503596344866186136027405868676e-11
    f256::from_bits((
        0xbffda93974a8c07c9d20badf145dfa3e,
        0x4ea8cd188da975d75f096ea801df2748,
    )),
    // +1 / 12! ≈
    // 2.0876756987868098979210090321201432312543423654534765645876756987868099e-9
    f256::from_bits((
        0x3ffe21eed8eff8d897b544da987acfe8,
        0x4bec01cf74b679c71d90b4ab7154a5ed,
    )),
    // -1 / 10! ≈
    // -2.75573192239858906525573192239858906525573192239858906525573192239858905e-7
    f256::from_bits((
        0xbffe927e4fb7789f5c72ef016d3ea667,
        0x8e4b61ddf05c2d95567d3a50ccdf4b1c,
    )),
    // +1 / 8! ≈
    // 2.48015873015873015873015873015873015873015873015873015873015873015873016e-5
    f256::from_bits((
        0x3ffefa01a01a01a01a01a01a01a01a01,
        0xa01a01a01a01a01a01a01a01a01a01a0,
    )),
    // -1 / 6! ≈
    // -1.38888888888888888888888888888888888888888888888888888888888888888888889e-3
    f256::from_bits((
        0xbfff56c16c16c16c16c16c16c16c16c1,
        0x6c16c16c16c16c16c16c16c16c16c16c,
    )),
    // +1 / 4! ≈
    // 4.16666666666666666666666666666666666666666666666666666666666666666666666e-2
    f256::from_bits((
        0x3fffa555555555555555555555555555,
        0x55555555555555555555555555555555,
    )),
    // -1 / 2! = 1/2
    f256::from_bits((
        0xbfffe000000000000000000000000000,
        0x00000000000000000000000000000000,
    )),
    // +1 / 0! = 1
    f256::from_bits((
        0x3ffff000000000000000000000000000,
        0x00000000000000000000000000000000,
    )),
];

// Cut-off for small values
// ≈0.00000000000000000000000000000000000210094754024801845063812748106760843
// TODO: verify limit
const SMALL_CUT_OFF: f256 = f256::from_bits((
    0x3ff8865752be2a167f0644b50757a602,
    0x81800000000000000000000000000000,
));

pub(crate) fn approx_cos(x: f256) -> f256 {
    debug_assert!(x >= f256::ZERO && x < FRAC_PI_2);
    // If x is zero or very small, cosine x == 1.
    if x <= SMALL_CUT_OFF {
        return f256::ONE;
    };
    let x2 = x * x;
    let mut res = COEFFS[0];
    for coeff in &COEFFS[1..N] {
        res = res.mul_add(x2, *coeff);
    }
    res
}

#[cfg(test)]
mod test_approx_cos {
    use super::*;
    use crate::{
        consts::{FRAC_1_SQRT_2, FRAC_PI_3, FRAC_PI_4},
        ONE_HALF,
    };

    #[test]
    fn test_approx_cos() {
        let x = FRAC_PI_3;
        assert_eq!(approx_cos(x), ONE_HALF);
        let x = FRAC_PI_4;
        assert_eq!(approx_cos(x), FRAC_1_SQRT_2);
        let x = f256::ZERO;
        assert_eq!(approx_cos(x), f256::ONE);
        let x = f256::NEG_ZERO;
        assert_eq!(approx_cos(x), f256::ONE);
    }
}

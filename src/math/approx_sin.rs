// ---------------------------------------------------------------------------
// Copyright:   (c) 2024 ff. Michael Amrhein (michael@adrhinum.de)
// License:     This program is part of a larger application. For license
//              details please read the file LICENSE.TXT provided together
//              with the application.
// ---------------------------------------------------------------------------
// $Source$
// $Revision$

use crate::{big_uint::u256, consts::FRAC_PI_2, f256};

const N: usize = 37;

const COEFFS: [f256; N] = [
    // +1 / 73! ≈
    // 2.23707868087505867468099557843448504360155487090939431692310878188138602e-106
    f256::from_bits((
        0x3fea006b1981a487620a0b36d29659d6,
        0x0eed3fd45aa471e8452dc47af1b93bcb,
    )),
    // -1 / 71! ≈
    // -1.17580855466793083941233127602516533891697724014997765297478597575685649e-102
    f256::from_bits((
        0xbfeac5116e3adb9fb94de363d939ee47,
        0x2e277067fe50042a8cc53a9fc32e313a,
    )),
    // +1 / 69! ≈
    // 5.84376851669961627187928644184507173441737688354538893528468629951157677e-99
    f256::from_bits((
        0x3feb899046602abcae3822090773eabf,
        0x1e609ac42ef3d70e210ed0421a33ec7b,
    )),
    // -1 / 67! ≈
    // -2.74189618803545995476576119851370765778863323375949648843557481173083182e-95
    f256::from_bits((
        0xbfec4d48849da8f4a291ccfcd7c988a7,
        0x6d8c29493ac8d218ef5e380fb883faa4,
    )),
    // +1 / 65! ≈
    // 1.21246649434928039199741960198276152627413361596844934718621118174737383e-91
    f256::from_bits((
        0x3fed0f9d2a2bb5471b0227ad777632e7,
        0xc0e431126ed68dd1ab6b57c5f8d37bb7,
    )),
    // -1 / 63! ≈
    // -5.04386061649300643070926554424828794930039584242874928429463851606907514e-88
    f256::from_bits((
        0xbfedd00dcf6a320e1bb7182616aa05d9,
        0xaff3e0eb5c48f404790c8292885b64d3,
    )),
    // +1 / 61! ≈
    // 1.97013195680216831183503912158338127299673461605266947044548580437658075e-84
    f256::from_bits((
        0x3fee8e9e56d649f7685bf3cea4b9c5a8,
        0x6dd4e1b8e2c2236587de1c07f8904f0b,
    )),
    // -1 / 59! ≈
    // -7.21068296189593602131624318499517545916804869475277026183047804401828553e-81
    f256::from_bits((
        0xbfef4b5bfc17fa97d2802a1ae5b0ff5e,
        0x4023f8b1f49ef920f927b78c1f5af2a1,
    )),
    // +1 / 57! ≈
    // 2.4674957095607893064944184179053490421273062633443979835983895866630573e-77
    f256::from_bits((
        0x3ff006db793c887b96fcd32d38a53f58,
        0xddd60d65ac3e50626c280e7830b21b74,
    )),
    // -1 / 55! ≈
    // -7.8762463049180394663301835899538741424703615925953183636460595606284789e-74
    f256::from_bits((
        0xbff0c1d008faac5c502a0691bda4c6dd,
        0xc0e04f70bbba8fa4b3493746a9f2cc65,
    )),
    // +1 / 53! ≈
    // 2.33924515256065772150006452621630062031369739300080955400287968950665825e-70
    f256::from_bits((
        0x3ff179d4f1058674df40f206da453565,
        0x15f54b343c3e4ccf98ffed6939f55aea,
    )),
    // -1 / 51! ≈
    // -6.44695964045717268045417783425212450958455001511023113083193642428035013e-67
    f256::from_bits((
        0xbff23161872bf7b8233772d91c5d112d,
        0x44064bd9e588eb2eaeb2337e0d3f566c,
    )),
    // +1 / 49! ≈
    // 1.64397470831657903351581534773429174994406025385310893836214378819148928e-63
    f256::from_bits((
        0x3ff2e5a42f0dfeb085d94a3fd410e123,
        0x1c72d6f18e8c3ad46004619d32fe9cdb,
    )),
    // -1 / 47! ≈
    // -3.86662851396059388682919769787105419586842971706251222302776218982638279e-60
    f256::from_bits((
        0xbff398da8e0a127eb9b78b454d8b628e,
        0x52abe2d969b50b8fe645081a88906823,
    )),
    // +1 / 45! ≈
    // 8.3596508471828039833247254227972191714675450482891514261860218544046396e-57
    f256::from_bits((
        0x3ff44a3cb8722206478e02c5e91c64ca,
        0xbec5f43a03d75f74a8d65fce02aa71ef,
    )),
    // -1 / 43! ≈
    // -1.65521086774219518869829563371384939595057391956125198238483232717211864e-53
    f256::from_bits((
        0xbff4f95db45257e5122dcbae56def372,
        0x0370619e16b6b8c9493b419fab93c927,
    )),
    // +1 / 41! ≈
    // 2.98931082714240451078912191448721200908673649872762108018700718287284626e-50
    f256::from_bits((
        0x3ff5a65e61c39d0240c7e25cfd1b1b2d,
        0xca885a152887a1738054011e8d8d92a2,
    )),
    // -1 / 39! ≈
    // -4.9024697565135433976941599397590276949022478579132985715066917799114679e-47
    f256::from_bits((
        0xbff651e99449a4bacde0104476aeb4c3,
        0xab2f3022f1749c497dc344e5775a5e6c,
    )),
    // +1 / 37! ≈
    // 7.26546017915307131538274503072287904384513132542750848297291721782879543e-44
    f256::from_bits((
        0x3ff6f9ec8d1c94e85af4c78b15c3d89d,
        0x2f3fcb2a927344305c831b36193c49a8,
    )),
    // -1 / 35! ≈
    // -9.6775929586318909920898163809228748864017149254694412993199257341479555e-41
    f256::from_bits((
        0xbff7a0dc59c716d91f2833c7f5a7e062,
        0x3b3afda3303ff7d9742b4532af69b5e8,
    )),
    // +1 / 33! ≈
    // 1.15163356207719502805868814932982211148180407613086351461907116236360671e-37
    f256::from_bits((
        0x3ff843981254dd0d51b5382cdffa9742,
        0x27d50dc124925687348048ea66d958e5,
    )),
    // -1 / 31! ≈
    // -1.21612504155351794962997468569229214972478510439419187143773914745596868e-34
    f256::from_bits((
        0xbff8e434d2e783f5bc42e1ee46fa6bfc,
        0x3913b62f2db6e93b6e244b31ba1023ac,
    )),
    // +1 / 29! ≈
    // 1.13099628864477169315587645769383169924405014708659844043709740713405088e-31
    f256::from_bits((
        0x3ff98259f98b4358ad7abe30e7766f12,
        0x91d666f5d9049ed27987f64aa97ba866,
    )),
    // -1 / 27! ≈
    // -9.18368986379554614842571683647391339786168719434317933634923094592849313e-29
    f256::from_bits((
        0xbffa1d1ab1c2dccea320a9a18f15d427,
        0x734a0749e62d53e1ccbda09a68ca1d12,
    )),
    // +1 / 25! ≈
    // 6.4469502843844733961948532192046872052989044104289118941171601240418022e-26
    f256::from_bits((
        0x3ffab3f3ccdd165fa8d4e44a419776f1,
        0x0b893fff294c13014bdbff99dad68eee,
    )),
    // -1 / 23! ≈
    // -3.86817017063068403771691193152281232317934264625734713647029607442508131e-23
    f256::from_bits((
        0xbffb4761b413163819d97b8704dd7f62,
        0x7984d6ff0465264584e5cf884c736f7f,
    )),
    // +1 / 21! ≈
    // 1.95729410633912612308475743735054303552874737900621765105396981365909115e-20
    f256::from_bits((
        0x3ffbd71b8ef6dcf5718bef146fcee6e4,
        0x5218487a0757f6d2b4571e19b38e1531,
    )),
    // -1 / 19! ≈
    // -8.2206352466243297169559812368722807492207389918261141344266732173681828e-18
    f256::from_bits((
        0xbffc62f49b4681415724ca1ec3b7b967,
        0x4b57eb741a062878d7ef76b1154a8d62,
    )),
    // +1 / 17! ≈
    // 2.81145725434552076319894558301032001623349273520453103397392224033991853e-15
    f256::from_bits((
        0x3ffce952c77030ad4a6b2605197771af,
        0xfea7748d1ac43a117079e890927198e1,
    )),
    // -1 / 15! ≈
    // -7.6471637318198164759011319857880704441551002397563244124090684937245784e-13
    f256::from_bits((
        0xbffd6ae7f3e733b81f11d8656b0ee8ca,
        0xfe91ebd5ec707db2878187199b98b26f,
    )),
    // +1 / 13! ≈
    // 1.60590438368216145993923771701549479327257105034882812660590438368216146e-10
    f256::from_bits((
        0x3ffde6124613a86d097ca38331d23af6,
        0x84d3b3757bf4471c732840d301a3425f,
    )),
    // -1 / 11! ≈
    // -2.50521083854417187750521083854417187750521083854417187750521083854417188e-8
    f256::from_bits((
        0xbffe5ae64567f544e38fe747e4b837dc,
        0x71e202b72f11b6aaac590f0129fef8e4,
    )),
    // +1 / 9! ≈
    // 2.75573192239858906525573192239858906525573192239858906525573192239858907e-6
    f256::from_bits((
        0x3ffec71de3a556c7338faac1c88e5001,
        0x71de3a556c7338faac1c88e500171de4,
    )),
    // -1 / 7! ≈
    // -1.98412698412698412698412698412698412698412698412698412698412698412698413e-4
    f256::from_bits((
        0xbfff2a01a01a01a01a01a01a01a01a01,
        0xa01a01a01a01a01a01a01a01a01a01a0,
    )),
    // +1 / 5! ≈
    // 8.3333333333333333333333333333333333333333333333333333333333333333333333e-3
    f256::from_bits((
        0x3fff8111111111111111111111111111,
        0x11111111111111111111111111111111,
    )),
    // -1 / 3! ≈
    // -1.66666666666666666666666666666666666666666666666666666666666666666666666e-1
    f256::from_bits((
        0xbfffc555555555555555555555555555,
        0x55555555555555555555555555555555,
    )),
    // +1 / 1! ≈
    // 1e0
    f256::from_bits((
        0x3ffff000000000000000000000000000,
        0x00000000000000000000000000000000,
    )),
];

// Cut-off for small values
// 3.68558253444961785070440139065674798057845110897338772162344362592262659e-36
const SMALL_CUT_OFF: f256 = f256::from_bits((
    0x3ff893988e1409212e7d0321914321a5,
    0x56473db022874f7b45be0f47d91c846d,
));

pub(crate) fn approx_sin(x: f256) -> f256 {
    debug_assert!(x >= f256::ZERO && x < FRAC_PI_2);
    // If x is zero or very small, sine x == x.
    if x <= SMALL_CUT_OFF {
        return x;
    };
    let x2 = x * x;
    let mut res = COEFFS[0];
    for coeff in &COEFFS[1..N] {
        res = res.mul_add(x2, *coeff);
    }
    res *= x;
    res
}

#[cfg(test)]
mod test_approx_sin {
    use core::str::FromStr;

    use super::*;
    use crate::{
        consts::{FRAC_1_SQRT_2, FRAC_PI_4, FRAC_PI_6},
        ONE_HALF,
    };

    #[test]
    fn test_approx_sin() {
        let x = FRAC_PI_6;
        assert_eq!(approx_sin(x), ONE_HALF);
        let x = FRAC_PI_4;
        assert!((approx_sin(x) - FRAC_1_SQRT_2).abs() <= FRAC_1_SQRT_2.ulp());
        let x = f256::ZERO;
        assert_eq!(approx_sin(x), f256::ZERO);
        let x = f256::NEG_ZERO;
        assert_eq!(approx_sin(x), f256::ZERO);
    }

    #[test]
    fn test_small_cutoff() {
        let mut f = SMALL_CUT_OFF;
        assert_eq!(approx_sin(f), f);
        f += f.ulp();
        assert_ne!(approx_sin(f), f);
    }
}
